#!/usr/bin/env python
# stix is a cable knitting pattern visualiser that uses termbox

import termbox, sys, os

#max_w = 100
#max_h = 50

   


def draw_screen(tb, pattern, style, softline, hardline):

    # draw all the things
    for i, r in enumerate(pattern): #TODO find out if r is needed
        number = len(pattern) - i
        # draw with style
        if softline == number and hardline == number:
            draw_line(tb, pattern, number, style, 'double')
        elif softline == number:
            draw_line(tb, pattern, number, style, 'soft')
        elif hardline == number:
            draw_line(tb, pattern, number, style, 'hard')
        else:
            draw_line(tb, pattern, number, style)

    tb.present()


def row_to_y(pattern, row):
    return len(pattern) - row


def y_to_row(pattern, y):
    return len(pattern - y)


def draw_line(tb, pattern, line, style, stylename='default'):
    cols = tb.width()
    
    # Write emptiness if there is more terminal than pattern
    if len(pattern) < row_to_y(pattern, line):
        for pos in range(cols):
            # apply style
            (fg, bg) = style[stylename]
            # draw emptiness
            tb.change_cell(pos, row_to_y(pattern, line), ord(' '), fg, bg)
    # Write pattern lines
    else:
        for i, char in enumerate(pattern[row_to_y(pattern, line)]):
            # apply style
            (fg, bg) = style[stylename]
            # draw correct char in the right place
            tb.change_cell(i, row_to_y(pattern, line), ord(char), fg, bg)
        

def move_line(tb, pattern, style, hardline, old_line, up_lines):
    softline = old_line + up_lines
    if softline > 0 and softline <= len(pattern):
        if hardline == old_line:
            draw_line(tb, pattern, old_line, style, 'hard')
            draw_line(tb, pattern, softline, style, 'soft')
        elif hardline == softline:
            draw_line(tb, pattern, old_line, style, 'default')
            draw_line(tb, pattern, softline, style, 'double')
        else:
            draw_line(tb, pattern, old_line, style, 'default')
            draw_line(tb, pattern, softline, style, 'soft')
        print_msg(tb, 'softline: {} -> {}'.format(old_line, softline))
        tb.present()
    else:
        softline = old_line
    return softline


def reset_line(filename, tb, pattern, style, old_line, new_line):
    # Save new hardline to file
    file_content = ['{}\n'.format(new_line)] + ['{}\n'.format(line) 
                                                for line in pattern]
    with open(filename, 'w') as file:
        file.writelines(file_content)
    
    draw_line(tb, pattern, old_line, style, 'default')
    if new_line + 1 > len(pattern):
        softline = new_line
        draw_line(tb, pattern, softline, style, 'double')
    else:
        softline = new_line + 1
        draw_line(tb, pattern, new_line, style, 'hard')
        draw_line(tb, pattern, softline, style, 'soft')
    print_msg(tb, 'hardline reset: {} -> {}'.format(old_line, new_line))
    tb.present()
    return new_line, softline
    

def print_msg(tb, msg):
    bottom = tb.height() - 1
    fg = termbox.WHITE
    bg = termbox.RED
    for i, char in enumerate(msg):
        tb.change_cell(i, bottom, ord(char), fg, bg)
    tb.present()


def prompt_quit(tb):
    prompt = 'Press y to quit'
    print_msg(tb, prompt)
    #x = len(prompt) + 2
    #y = tb.height() - 1
    #fg = termbox.WHITE
    #bg = termbox.BLACK
    #tb.set_cursor(x, y) 
    answer = tb.poll_event()
    (evtype, char, key, mod, w, h, mx, my) = answer
    if evtype == termbox.EVENT_KEY and char in ['y', 'Y']:
        return True


def main():
    filename = os.path.join(sys.path[0], "test.stix")
    if len(sys.argv) > 1:
        if os.path.isfile(sys.argv[1]):
            filename = sys.argv[1]
    
    lines = [line.rstrip('\n') for line in open(filename)]

    hardline = 1
    try:
        hardline = int(lines[0])
    except ValueError:
        hardline = 1
    softline = hardline

    with termbox.Termbox() as tb:
        style = {
                'default': (termbox.WHITE, termbox.BLACK),
                'hard': (termbox.RED, termbox.BLACK),
                'soft': (termbox.BLACK, termbox.WHITE),
                'double': (termbox.RED, termbox.WHITE)
                }

        tb.clear()
        print_msg(tb, 'initline: {}'.format(softline))
        
        # read the rest to matrix array thingy
        pattern = lines[1:]

        draw_screen(tb, pattern, style, softline, hardline)
        
        while True:
            current_event = tb.poll_event()
            (evtype, char, key, mod, w, h, mx, my) = current_event
            if evtype == termbox.EVENT_RESIZE:
                draw_screen(tb, pattern, style, softline, hardline)
            elif evtype == termbox.EVENT_KEY:
                if key == termbox.KEY_ARROW_UP:
                    softline = move_line(tb, pattern, style, hardline, softline, 1)
                elif key == termbox.KEY_ARROW_DOWN:
                    softline = move_line(tb, pattern, style, hardline, softline, -1)
                elif key == termbox.KEY_ENTER:
                    hardline, softline = reset_line(filename, tb, pattern, style, hardline, softline)
                elif key == termbox.KEY_ESC:
                    if prompt_quit(tb):
                        break


if __name__ == '__main__':
    main()
