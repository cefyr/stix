#!/usr/bin/env python
# stix is a cable knitting pattern visualiser that uses termbox

import termbox

max_w = 100
max_h = 50
filename = "test.stix"

   


#def draw_screen(pattern):
#    cols = tb.width()
#    rows = tb.height()
#    #NOTE here we pretend that scrolling is not a thing
#    # possibly move shit from top-down to bottom-up array
#    
#    # draw all the things
#    for r in pattern:
#        number = r.index() + 1
#        if softline == number and hardline == number:
#            draw_line(pattern, number, 'double')
#        elif softline == number:
#            draw_line(pattern, number, 'soft')
#        elif hardline == number:
#            draw_line(pattern, number, 'hard')
#        else:
#            draw_line(pattern, number)
#
#    tb.present()
#
#
#def y_row(total, p_row):
#    return total - p_row - 1
#
#
#def draw_line(pattern, number, stylename='default'):
#    rows = tb.height()
#    for char in pattern[y_row(rows, number)]:
#        # apply style
#        (fg, bg) = self.style[stylename]
#        # draw correct char in the right place
#        self.change_cell(char.index(), y_row(rows, number), char, fg, bg)
#        
#
#def move_line(up):
#    old_line = softline
#    softline += up
#    if hardline == old_line:
#        draw_line(old_line, 'hard')
#        draw_line(softline, 'soft')
#    elif hardline == softline:
#        draw_line(old_line, 'default')
#        draw_line(softline, 'double')
#    else:
#        draw_line(old_line, 'default')
#        draw_line(softline, 'soft')
#    print_msg('softline moved: {} -> {}'.format(old_line, softline))
#    tb.present()
#
#
#def reset_line(y):
#    rows = tb.height()
#    old_line = hardline
#    hardline = rows - y - 1
#    draw_line(old_line, 'soft')
#    draw_line(hardline, 'hard')
#    print_msg('hardline reset: {} -> {}'.format(old_line, hardline))
#    tb.present()
    

def print_msg(tb, msg):
    bottom = tb.height() - 1
    fg = termbox.WHITE
    bg = termbox.RED
    for i, char in enumerate(msg):
        tb.change_cell(i, bottom, ord(char), fg, bg)
    tb.present()


def prompt_quit(tb):
    # Here should be some poll event for asking y/N
    tb.close()


def boxtest(tb):
    rows = tb.height()
    cols = tb.width()
    print_msg(tb, 'we get signal, height {} width {}'.format(rows, cols))

def main():
    tb = termbox.Termbox()
    tb.clear()
    boxtest(tb)
    counter = 0
    while True:
        current_event = tb.poll_event()
        (evtype, char, key, mod, w, h, mx, my) = current_event
#       if type == tb.EVENT_RESIZE:
#            ui.draw_screen()
        if evtype == termbox.EVENT_KEY:
            if key == termbox.KEY_ARROW_UP:
                print_msg(tb, 'up up and away! --{}'.format(counter))
#                ui.move_line(1)
            elif key == termbox.KEY_ARROW_DOWN:
                print_msg(tb, 'dooown --{}'.format(counter))
#                ui.move_line(-1)
            elif key == termbox.KEY_ENTER:
                tb.clear()
                print_msg(tb, 'OK --{}'.format(counter))
#                ui.reset_line(y)
            elif key == termbox.KEY_ESC:
                prompt_quit(tb)
        counter +=1
    tb.close()
#    style = {
#            'default': (tb.WHITE, tb.BLACK),
#            'soft': (tb.WHITE | tb.BOLD, tb.BLACK),
#            'hard': (tb.BLACK, tb.WHITE),
#            'double': (tb.BLACK | tb.BOLD, tb.WHITE)
#            }
#
#    lines = [line.rstrip('\n') for line in open(filename)]
#    print_msg('file opened, stuff fetched')
#
#    try:
#        hardline = int(lines[0])
#    except ValueError:
#        hardline = 1
#    softline = hardline
#    print_msg('initline: {}'.format(softline))
#    
#    # read the rest to matrix array thingy
#    self.pattern = lines[1:]
#
#    draw_screen()
#    print('trying to start')
#    with Stixbox() as ui:
#        ui.running = True
#        print(ui.running)
#        while ui.running:
#            current_event = ui.poll_event()
#            while current_event:
#                (type, ch, key, mod, w, h, x, y) = current_event
#                if type == tb.EVENT_RESIZE:
#                    ui.draw_screen()
#                if type == tb.EVENT_KEY:
#                    if key == tb.KEY_ARROW_UP:
#                        ui.move_line(1)
#                    elif key == tb.KEY_ARROW_DOWN:
#                        ui.move_line(-1)
#                    elif key == tb.KEY_ENTER:
#                        ui.reset_line(y)
#                    elif key == tb.KEY_ESCAPE:
#                        ui.prompt_quit()
#                current_event = ui.poll_event()
#

if __name__ == '__main__':
    main()


#def f(x):
#    return {
#        'a': 1,
#        'b': 2,
#    }.get(x, 9)    # 9 is default if x not found

